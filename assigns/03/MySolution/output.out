Poly/ML 5.9 Release
exception ConsMatch320
exception ERROR320 of string optn
exception ListSubscript320
exception OptnSubscript320
val assert320 = fn: bool -> unit
val assert320_some = fn: bool * string -> unit
val char_of_digit = fn: int -> char
val list_append = fn: 'a list * 'a list -> 'a list
val list_foreach = fn: 'a list * ('a -> unit) -> unit
val list_is_cons = fn: 'a list -> bool
val list_is_nil = fn: 'a list -> bool
val list_length = fn: 'a list -> int
val list_map = fn: 'a list * ('a -> 'b) -> 'b list
val list_rappend = fn: 'a list * 'a list -> 'a list
val list_reduce_left = fn: 'a * 'b list * ('a * 'b -> 'a) -> 'a
val list_reduce_right = fn: 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_reverse = fn: 'a list -> 'a list
val list_uncons = fn: 'a list -> 'a * 'a list
val list_unnil = fn: 'a list -> unit
eqtype 'a optn
val optn_is_none = fn: 'a optn -> bool
val optn_is_some = fn: 'a optn -> bool
val optn_unnone = fn: 'a optn -> unit
val optn_unsome = fn: 'a optn -> 'a
val print_char = fn: char -> unit
val print_int = fn: int -> unit
val it = (): unit
val find_root = fn: (int -> int) -> int
val it = (): unit
Assign03-01-test passed!
> Poly/ML 5.9 Release
exception ConsMatch320
exception ERROR320 of string optn
exception ListSubscript320
exception OptnSubscript320
val assert320 = fn: bool -> unit
val assert320_some = fn: bool * string -> unit
val char_of_digit = fn: int -> char
val list_append = fn: 'a list * 'a list -> 'a list
val list_foreach = fn: 'a list * ('a -> unit) -> unit
val list_is_cons = fn: 'a list -> bool
val list_is_nil = fn: 'a list -> bool
val list_length = fn: 'a list -> int
val list_map = fn: 'a list * ('a -> 'b) -> 'b list
val list_rappend = fn: 'a list * 'a list -> 'a list
val list_reduce_left = fn: 'a * 'b list * ('a * 'b -> 'a) -> 'a
val list_reduce_right = fn: 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_reverse = fn: 'a list -> 'a list
val list_uncons = fn: 'a list -> 'a * 'a list
val list_unnil = fn: 'a list -> unit
eqtype 'a optn
val optn_is_none = fn: 'a optn -> bool
val optn_is_some = fn: 'a optn -> bool
val optn_unnone = fn: 'a optn -> unit
val optn_unsome = fn: 'a optn -> 'a
val print_char = fn: char -> unit
val print_int = fn: int -> unit
val it = (): unit
val list_range = fn: int * int -> int list
val it = (): unit
Assign03-02-test passed!
> Poly/ML 5.9 Release
exception ConsMatch320
exception ERROR320 of string optn
exception ListSubscript320
exception OptnSubscript320
val assert320 = fn: bool -> unit
val assert320_some = fn: bool * string -> unit
val char_of_digit = fn: int -> char
val list_append = fn: 'a list * 'a list -> 'a list
val list_foreach = fn: 'a list * ('a -> unit) -> unit
val list_is_cons = fn: 'a list -> bool
val list_is_nil = fn: 'a list -> bool
val list_length = fn: 'a list -> int
val list_map = fn: 'a list * ('a -> 'b) -> 'b list
val list_rappend = fn: 'a list * 'a list -> 'a list
val list_reduce_left = fn: 'a * 'b list * ('a * 'b -> 'a) -> 'a
val list_reduce_right = fn: 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_reverse = fn: 'a list -> 'a list
val list_uncons = fn: 'a list -> 'a * 'a list
val list_unnil = fn: 'a list -> unit
eqtype 'a optn
val optn_is_none = fn: 'a optn -> bool
val optn_is_some = fn: 'a optn -> bool
val optn_unnone = fn: 'a optn -> unit
val optn_unsome = fn: 'a optn -> 'a
val print_char = fn: char -> unit
val print_int = fn: int -> unit
val it = (): unit
val list_tabulate = fn: int * (int -> 'a) -> 'a list
val it = (): unit
Assign03-03-test passed!
> poly: : error: Value or constructor (CD) has not been declared Found near CD
Static Errors
Poly/ML 5.9 Release
exception ConsMatch320
exception ERROR320 of string optn
exception ListSubscript320
exception OptnSubscript320
val assert320 = fn: bool -> unit
val assert320_some = fn: bool * string -> unit
val char_of_digit = fn: int -> char
val list_append = fn: 'a list * 'a list -> 'a list
val list_foreach = fn: 'a list * ('a -> unit) -> unit
val list_is_cons = fn: 'a list -> bool
val list_is_nil = fn: 'a list -> bool
val list_length = fn: 'a list -> int
val list_map = fn: 'a list * ('a -> 'b) -> 'b list
val list_rappend = fn: 'a list * 'a list -> 'a list
val list_reduce_left = fn: 'a * 'b list * ('a * 'b -> 'a) -> 'a
val list_reduce_right = fn: 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_reverse = fn: 'a list -> 'a list
val list_uncons = fn: 'a list -> 'a * 'a list
val list_unnil = fn: 'a list -> unit
eqtype 'a optn
val optn_is_none = fn: 'a optn -> bool
val optn_is_some = fn: 'a optn -> bool
val optn_unnone = fn: 'a optn -> unit
val optn_unsome = fn: 'a optn -> 'a
val print_char = fn: char -> unit
val print_int = fn: int -> unit
val it = (): unit
val list_longest_ascend = fn: int list -> int list
val it = (): unit
Assign03-04-test passed!
val xs = [4, 1, 2, 1, 3, 8, 9, 5, 6, 7, ...]: int list
> 